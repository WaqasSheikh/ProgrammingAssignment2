library(casheSolve)
m <- matrix(1:4)
m
m <- matrix(1:4,2)
m
casheSolve(m)
Rscript
source('D:/Study/Air Labs/Data Science/Specialization/datasciencecoursera/R_Programming_Week3_A1/ProgrammingAssignment2/cachematrix.R')
casheSolve(m)
m
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getIverse()
if(!is.null(m)){
message('getting cashed data')
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setIverse(m)
m
}
cacheSolve(m)
is.recursive(x)
is.recursive(m)
is.atomic(m)
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[getIverse()]
if(!is.null(m)){
message('getting cashed data')
return(m)
}
data <- x[get()]
m <- solve(data, ...)
x[setIverse(m)]
m
}
cacheSolve(m)
list(a=5,b=5.5l)
list('a'=5, 'b'= 5.5L)
lis = list('a'=5, 'b'= 5.5L)
is.recursive(lis)
is.atomic()
is.atomic(lis)
cacheSolve <- function(x, ...) {
## 'x' is assumed to be a wrapper returned by 'makeCacheMatrix'
## Check if the inverse has been cached
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the original matrix
data <- x$get()
# Calculate the inverse and put it into the cache
m <- solve(data, ...)
x$setinverse(m)
# Return the inverse
m
}
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
cacheSolve(m)
rem(lis)
rm(lis)
cacheSolve(1:4)
cacheSolve(list(1,2,3,4))
l <- list(1,2,3,4)
cacheSolve(l)
a <- '406548ca3ea413d35abf185ba039ddc3df380339'
b <- '406548ca3ea413d35abf185ba039ddc3df380339'
a==b
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...) { ##special matrix provided or create a test 2x2 matrix
## let's see if there's something there already
calculatedInverse <- x$getInverse()
##check if there's a cached value AND it's a matrix
if(!is.null(calculatedInverse) && is.matrix(calculatedInverse)) {
message("We found cached data and saved valuable cpus!!!")
return(calculatedInverse)
}
## otherwise get the matrix
matrixToSolve <- x$get()
## try to solve the matrix and catch errors and warnings
calculatedInverse <- tryCatch({
solve(matrixToSolve)
}, warning=function(w) {
message("This may not be the result you're looking for")
message(w)
}, error=function(e) {
message("Something went wrong solving your matrix")
message(e)
message("\n")
})
## whatever the case, set the value of the inverse (NULL if something went wrong)
message("Setting the value of inverse to:")
x$setInverse(calculatedInverse)
}
cacheSolve()
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2), ...) { ##special matrix provided or create a test 2x2 matrix
## let's see if there's something there already
calculatedInverse <- x$getInverse()
##check if there's a cached value AND it's a matrix
if(!is.null(calculatedInverse) && is.matrix(calculatedInverse)) {
message("We found cached data and saved valuable cpus!!!")
return(calculatedInverse)
}
## otherwise get the matrix
matrixToSolve <- x$get()
## try to solve the matrix and catch errors and warnings
calculatedInverse <- tryCatch({
solve(matrixToSolve)
}, warning=function(w) {
message("This may not be the result you're looking for")
message(w)
}, error=function(e) {
message("Something went wrong solving your matrix")
message(e)
message("\n")
})
## whatever the case, set the value of the inverse (NULL if something went wrong)
message("Setting the value of inverse to:")
x$setInverse(calculatedInverse)
}
cacheSolve()
cacheSolve(1:4)
